+function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),o=n.data("bs.collapse"),r=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!o&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),o||n.data("bs.collapse",o=new i(this,r)),"string"==typeof e&&o[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};i.VERSION="3.3.7",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0},i.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,o=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(o&&o.length&&(e=o.data("bs.collapse"),e&&e.transitioning))){var r=t.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){o&&o.length&&(n.call(o,"hide"),e||o.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[s](this.$element[0][l])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var o=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(o,this)).emulateTransitionEnd(i.TRANSITION_DURATION):o.call(this)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var o=t(i);this.addAriaAndCollapsedClass(e(o),o)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var o=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=o,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var o=t(this);o.attr("data-target")||i.preventDefault();var r=e(o),s=r.data("bs.collapse"),a=s?"toggle":o.data();n.call(r,a)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),o=i.data("bs.tab");o||i.data("bs.tab",o=new n(this)),"string"==typeof e&&o[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var o=n.find(".active:last a"),r=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:o[0]});if(o.trigger(r),e.trigger(s),!s.isDefaultPrevented()&&!r.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})}}},n.prototype.activate=function(e,i,o){function r(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),o&&o()}var s=i.find("> .active"),a=o&&t.support.transition&&(s.length&&s.hasClass("fade")||!!i.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),s.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var o=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var o=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(o,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),o=i.data("bs.button"),r="object"==typeof e&&e;o||i.data("bs.button",o=new n(this,r)),"toggle"==e?o.toggle():e&&o.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,o=i.is("input")?"val":"html",r=i.data();e+="Text",null==r.resetText&&i.data("resetText",i[o]()),setTimeout(t.proxy(function(){i[o](null==r[e]?this.options[e]:r[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target).closest(".btn");e.call(i,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),o=i.data("bs.affix"),r="object"==typeof e&&e;o||i.data("bs.affix",o=new n(this,r)),"string"==typeof e&&o[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return o<n&&"top";if("bottom"==this.affixed)return null!=n?!(o+this.unpin<=r.top)&&"bottom":!(o+s<=t-i)&&"bottom";var a=null==this.affixed,l=a?o:r.top,c=a?s:e;return null!=n&&o<=n?"top":null!=i&&l+c>=t-i&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,o=i.top,r=i.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(r=o=i),"function"==typeof o&&(o=i.top(this.$element)),"function"==typeof r&&(r=i.bottom(this.$element));var a=this.getState(s,e,o,r);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-r})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function n(n){n&&3===n.which||(t(o).remove(),t(r).each(function(){var i=t(this),o=e(i),r={relatedTarget:this};o.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(o[0],n.target)||(o.trigger(n=t.Event("hide.bs.dropdown",r)),n.isDefaultPrevented()||(i.attr("aria-expanded","false"),o.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r)))))}))}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new s(this)),"string"==typeof e&&i[e].call(n)})}var o=".dropdown-backdrop",r='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.7",s.prototype.toggle=function(i){var o=t(this);if(!o.is(".disabled, :disabled")){var r=e(o),s=r.hasClass("open");if(n(),!s){"ontouchstart"in document.documentElement&&!r.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this};if(r.trigger(i=t.Event("show.bs.dropdown",a)),i.isDefaultPrevented())return;o.trigger("focus").attr("aria-expanded","true"),r.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},s.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var i=t(this);if(n.preventDefault(),n.stopPropagation(),!i.is(".disabled, :disabled")){var o=e(i),s=o.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&o.find(r).trigger("focus"),i.trigger("click");var a=" li:not(.disabled):visible a",l=o.find(".dropdown-menu"+a);if(l.length){var c=l.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,s.prototype.toggle).on("keydown.bs.dropdown.data-api",r,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var o=t(this),r=o.data("bs.modal"),s=t.extend({},n.DEFAULTS,o.data(),"object"==typeof e&&e);r||o.data("bs.modal",r=new n(this,s)),"string"==typeof e?r[e](i):s.show&&r.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,o=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(o),this.isShown||o.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var o=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),o&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:e});o?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&o;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;r?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),o=i.attr("href"),r=t(i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,"")),s=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(o)&&o},r.data(),i.data());i.is("a")&&n.preventDefault(),r.one("show.bs.modal",function(t){t.isDefaultPrevented()||r.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(r,s,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),o=n.data("bs.alert");o||n.data("bs.alert",o=new i(this)),"string"==typeof e&&o[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var o=t(this),r=o.attr("data-target");r||(r=o.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));var s=t("#"===r?[]:r);e&&e.preventDefault(),s.length||(s=o.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var o=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=o,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),!function(t){if("object"==typeof exports)module.exports=t();else if("function"==typeof define&&define.amd)define(t);else{var e;"undefined"!=typeof window?e=window:"undefined"!=typeof global?e=global:"undefined"!=typeof self&&(e=self),e.ShareButton=t()}}(function(){return function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);throw new Error("Cannot find module '"+s+"'")}var c=n[s]={exports:{}};e[s][0].call(c.exports,function(t){var n=e[s][1][t];return o(n?n:t)},c,c.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){t("../../modules/es6.array.iterator"),e.exports=t("../../modules/$.core").Array.values},{"../../modules/$.core":6,"../../modules/es6.array.iterator":34}],2:[function(t,e,n){t("../../modules/es6.math.trunc"),e.exports=t("../../modules/$.core").Math.trunc},{"../../modules/$.core":6,"../../modules/es6.math.trunc":35}],3:[function(t,e,n){t("../../modules/es6.symbol"),e.exports=t("../../modules/$.core").Symbol},{"../../modules/$.core":6,"../../modules/es6.symbol":36}],4:[function(t,e,n){var i=t("./$.is-object");e.exports=function(t){if(!i(t))throw TypeError(t+" is not an object!");return t}},{"./$.is-object":17}],5:[function(t,e,n){var i={}.toString;e.exports=function(t){return i.call(t).slice(8,-1)}},{}],6:[function(t,e,n){var i=e.exports={version:"1.2.3"};"number"==typeof __e&&(__e=i)},{}],7:[function(t,e,n){var i=t("./$.global"),o=t("./$.core"),r=t("./$.hide"),s=t("./$.redef"),a="prototype",l=function(t,e){return function(){return t.apply(e,arguments)}},c=function(t,e,n){var u,d,f,h,p=t&c.G,g=t&c.P,m=p?i:t&c.S?i[e]||(i[e]={}):(i[e]||{})[a],b=p?o:o[e]||(o[e]={});p&&(n=e);for(u in n)d=!(t&c.F)&&m&&u in m,f=(d?m:n)[u],h=t&c.B&&d?l(f,i):g&&"function"==typeof f?l(Function.call,f):f,m&&!d&&s(m,u,f),b[u]!=f&&r(b,u,h),g&&((b[a]||(b[a]={}))[u]=f)};i.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,e.exports=c},{"./$.core":6,"./$.global":12,"./$.hide":14,"./$.redef":26}],8:[function(t,e,n){e.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},{}],9:[function(t,e,n){var i=t("./$");e.exports=function(t){var e=i.getKeys(t),n=i.getSymbols;if(n)for(var o,r=n(t),s=i.isEnum,a=0;r.length>a;)s.call(t,o=r[a++])&&e.push(o);return e}},{"./$":22}],10:[function(t,e,n){e.exports=function(t){try{return!!t()}catch(e){return!0}}},{}],11:[function(t,e,n){var i={}.toString,o=t("./$.to-iobject"),r=t("./$").getNames,s="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(t){try{return r(t)}catch(e){return s.slice()}};e.exports.get=function(t){return s&&"[object Window]"==i.call(t)?a(t):r(o(t))}},{"./$":22,"./$.to-iobject":30}],12:[function(t,e,n){var i=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=i)},{}],13:[function(t,e,n){var i={}.hasOwnProperty;e.exports=function(t,e){return i.call(t,e)}},{}],14:[function(t,e,n){var i=t("./$"),o=t("./$.property-desc");e.exports=t("./$.support-desc")?function(t,e,n){return i.setDesc(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},{"./$":22,"./$.property-desc":25,"./$.support-desc":28}],15:[function(t,e,n){var i=t("./$.cof");e.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==i(t)?t.split(""):Object(t)}},{"./$.cof":5}],16:[function(t,e,n){var i=t("./$.cof");e.exports=Array.isArray||function(t){return"Array"==i(t)}},{"./$.cof":5}],17:[function(t,e,n){e.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],18:[function(t,e,n){"use strict";var i=t("./$"),o={};t("./$.hide")(o,t("./$.wks")("iterator"),function(){return this}),e.exports=function(e,n,r){e.prototype=i.create(o,{next:t("./$.property-desc")(1,r)}),t("./$.tag")(e,n+" Iterator")}},{"./$":22,"./$.hide":14,"./$.property-desc":25,"./$.tag":29,"./$.wks":33}],19:[function(t,e,n){"use strict";var i=t("./$.library"),o=t("./$.def"),r=t("./$.redef"),s=t("./$.hide"),a=t("./$.has"),l=t("./$.wks")("iterator"),c=t("./$.iterators"),u=!([].keys&&"next"in[].keys()),d="@@iterator",f="keys",h="values",p=function(){return this};e.exports=function(e,n,g,m,b,v,y){t("./$.iter-create")(g,n,m);var w,k,$=function(t){switch(t){case f:return function(){return new g(this,t)};case h:return function(){return new g(this,t)}}return function(){return new g(this,t)}},_=n+" Iterator",S=e.prototype,C=S[l]||S[d]||b&&S[b],x=C||$(b);if(C){var T=t("./$").getProto(x.call(new e));t("./$.tag")(T,_,!0),!i&&a(S,d)&&s(T,l,p)}if(i&&!y||s(S,l,x),c[n]=x,c[_]=p,b)if(w={values:b==h?x:$(h),keys:v?x:$(f),entries:b!=h?x:$("entries")},y)for(k in w)k in S||r(S,k,w[k]);else o(o.P+o.F*u,n,w)}},{"./$":22,"./$.def":7,"./$.has":13,"./$.hide":14,"./$.iter-create":18,"./$.iterators":21,"./$.library":24,"./$.redef":26,"./$.tag":29,"./$.wks":33}],20:[function(t,e,n){e.exports=function(t,e){return{value:e,done:!!t}}},{}],21:[function(t,e,n){e.exports={}},{}],22:[function(t,e,n){var i=Object;e.exports={create:i.create,getProto:i.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:i.getOwnPropertyDescriptor,setDesc:i.defineProperty,setDescs:i.defineProperties,getKeys:i.keys,getNames:i.getOwnPropertyNames,getSymbols:i.getOwnPropertySymbols,each:[].forEach}},{}],23:[function(t,e,n){var i=t("./$"),o=t("./$.to-iobject");e.exports=function(t,e){for(var n,r=o(t),s=i.getKeys(r),a=s.length,l=0;a>l;)if(r[n=s[l++]]===e)return n}},{"./$":22,"./$.to-iobject":30}],24:[function(t,e,n){e.exports=!1},{}],25:[function(t,e,n){e.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},{}],26:[function(t,e,n){var i=t("./$.global"),o=t("./$.hide"),r=t("./$.uid")("src"),s="toString",a=Function[s],l=(""+a).split(s);t("./$.core").inspectSource=function(t){return a.call(t)},(e.exports=function(t,e,n,s){"function"==typeof n&&(n.hasOwnProperty(r)||o(n,r,t[e]?""+t[e]:l.join(String(e))),n.hasOwnProperty("name")||o(n,"name",e)),t===i?t[e]=n:(s||delete t[e],o(t,e,n))})(Function.prototype,s,function(){return"function"==typeof this&&this[r]||a.call(this)})},{"./$.core":6,"./$.global":12,"./$.hide":14,"./$.uid":31}],27:[function(t,e,n){var i=t("./$.global"),o="__core-js_shared__",r=i[o]||(i[o]={});e.exports=function(t){return r[t]||(r[t]={})}},{"./$.global":12}],28:[function(t,e,n){e.exports=!t("./$.fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./$.fails":10}],29:[function(t,e,n){var i=t("./$").setDesc,o=t("./$.has"),r=t("./$.wks")("toStringTag");e.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,r)&&i(t,r,{configurable:!0,value:e})}},{"./$":22,"./$.has":13,"./$.wks":33}],30:[function(t,e,n){var i=t("./$.iobject"),o=t("./$.defined");e.exports=function(t){return i(o(t))}},{"./$.defined":8,"./$.iobject":15}],31:[function(t,e,n){var i=0,o=Math.random();e.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++i+o).toString(36))}},{}],32:[function(t,e,n){var i=t("./$.wks")("unscopables");void 0==[][i]&&t("./$.hide")(Array.prototype,i,{}),e.exports=function(t){[][i][t]=!0}},{"./$.hide":14,"./$.wks":33}],33:[function(t,e,n){var i=t("./$.shared")("wks"),o=t("./$.global").Symbol;e.exports=function(e){return i[e]||(i[e]=o&&o[e]||(o||t("./$.uid"))("Symbol."+e))}},{"./$.global":12,"./$.shared":27,"./$.uid":31}],34:[function(t,e,n){"use strict";var i=t("./$.unscope"),o=t("./$.iter-step"),r=t("./$.iterators"),s=t("./$.to-iobject");t("./$.iter-define")(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,n):"values"==e?o(0,t[n]):o(0,[n,t[n]])},"values"),r.Arguments=r.Array,i("keys"),i("values"),i("entries")},{"./$.iter-define":19,"./$.iter-step":20,"./$.iterators":21,"./$.to-iobject":30,"./$.unscope":32}],35:[function(t,e,n){var i=t("./$.def");i(i.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},{"./$.def":7}],36:[function(t,e,n){"use strict";var i=t("./$"),o=t("./$.global"),r=t("./$.has"),s=t("./$.support-desc"),a=t("./$.def"),l=t("./$.redef"),c=t("./$.fails"),u=t("./$.shared"),d=t("./$.tag"),f=t("./$.uid"),h=t("./$.wks"),p=t("./$.keyof"),g=t("./$.get-names"),m=t("./$.enum-keys"),b=t("./$.is-array"),v=t("./$.an-object"),y=t("./$.to-iobject"),w=t("./$.property-desc"),k=i.getDesc,$=i.setDesc,_=i.create,S=g.get,C=o.Symbol,x=o.JSON,T=x&&x.stringify,O=!1,E=h("_hidden"),j=i.isEnum,I=u("symbol-registry"),A=u("symbols"),N="function"==typeof C,P=Object.prototype,D=s&&c(function(){return 7!=_($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a})?function(t,e,n){var i=k(P,e);i&&delete P[e],$(t,e,n),i&&t!==P&&$(P,e,i)}:$,L=function(t){var e=A[t]=_(C.prototype);return e._k=t,s&&O&&D(P,t,{configurable:!0,set:function(e){r(this,E)&&r(this[E],t)&&(this[E][t]=!1),D(this,t,w(1,e))}}),e},R=function(t){return"symbol"==typeof t},F=function(t,e,n){return n&&r(A,e)?(n.enumerable?(r(t,E)&&t[E][e]&&(t[E][e]=!1),n=_(n,{enumerable:w(0,!1)})):(r(t,E)||$(t,E,w(1,{})),t[E][e]=!0),D(t,e,n)):$(t,e,n)},B=function(t,e){v(t);for(var n,i=m(e=y(e)),o=0,r=i.length;r>o;)F(t,n=i[o++],e[n]);return t},U=function(t,e){return void 0===e?_(t):B(_(t),e)},W=function(t){var e=j.call(this,t);return!(e||!r(this,t)||!r(A,t)||r(this,E)&&this[E][t])||e},M=function(t,e){var n=k(t=y(t),e);return!n||!r(A,e)||r(t,E)&&t[E][e]||(n.enumerable=!0),n},H=function(t){for(var e,n=S(y(t)),i=[],o=0;n.length>o;)r(A,e=n[o++])||e==E||i.push(e);return i},z=function(t){for(var e,n=S(y(t)),i=[],o=0;n.length>o;)r(A,e=n[o++])&&i.push(A[e]);return i},q=function(t){for(var e,n,i=[t],o=1,r=arguments;r.length>o;)i.push(r[o++]);return e=i[1],"function"==typeof e&&(n=e),!n&&b(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!R(e))return e}),i[1]=e,T.apply(x,i)},V=c(function(){var t=C();return"[null]"!=T([t])||"{}"!=T({a:t})||"{}"!=T(Object(t))});N||(C=function(){if(R(this))throw TypeError("Symbol is not a constructor");return L(f(arguments.length>0?arguments[0]:void 0))},l(C.prototype,"toString",function(){return this._k}),R=function(t){return t instanceof C},i.create=U,i.isEnum=W,i.getDesc=M,i.setDesc=F,i.setDescs=B,i.getNames=g.get=H,i.getSymbols=z,s&&!t("./$.library")&&l(P,"propertyIsEnumerable",W,!0));var Q={"for":function(t){return r(I,t+="")?I[t]:I[t]=C(t)},keyFor:function(t){return p(I,t)},useSetter:function(){O=!0},useSimple:function(){O=!1}};i.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(t){var e=h(t);Q[t]=N?e:L(e)}),O=!0,a(a.G+a.W,{Symbol:C}),a(a.S,"Symbol",Q),a(a.S+a.F*!N,"Object",{create:U,defineProperty:F,defineProperties:B,getOwnPropertyDescriptor:M,getOwnPropertyNames:H,getOwnPropertySymbols:z}),x&&a(a.S+a.F*(!N||V),"JSON",{stringify:q}),d(C,"Symbol"),d(Math,"Math",!0),d(o.JSON,"JSON",!0)},{"./$":22,"./$.an-object":4,"./$.def":7,"./$.enum-keys":9,"./$.fails":10,"./$.get-names":11,"./$.global":12,"./$.has":13,"./$.is-array":16,"./$.keyof":23,"./$.library":24,"./$.property-desc":25,"./$.redef":26,"./$.shared":27,"./$.support-desc":28,"./$.tag":29,"./$.to-iobject":30,"./$.uid":31,"./$.wks":33}],37:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=function(t,e,n){for(var i=!0;i;){var o=t,r=e,s=n;i=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var c=Object.getPrototypeOf(o);if(null===c)return;t=c,e=r,n=s,i=!0,a=c=void 0}},l=t("./share-utils"),c=i(l);t("core-js/fn/symbol"),t("core-js/fn/array/iterator"),t("core-js/fn/math/trunc");
var u=function(t){function e(t,n){o(this,e),a(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),"object"==typeof t?(this.element=void 0,n=t):this.element=t,this.el={head:document.getElementsByTagName("head")[0],body:document.getElementsByTagName("body")[0]},this.config={enabledNetworks:0,protocol:"//",url:window.location.href,caption:null,title:this._defaultTitle(),image:this._defaultImage(),description:this._defaultDescription(),ui:{flyout:"sb-top sb-center",buttonText:"Share",namespace:"sb-",networkOrder:[],collision:!1},networks:{googlePlus:{enabled:!0,url:null},twitter:{enabled:!0,url:null,description:null},facebook:{enabled:!0,loadSdk:!0,url:null,appId:null,title:null,caption:null,description:null,image:null},pinterest:{enabled:!0,url:null,image:null,description:null},reddit:{enabled:!0,url:null,title:null},linkedin:{enabled:!0,url:null,title:null,description:null},whatsapp:{enabled:!0,description:null,url:null},email:{enabled:!0,title:null,description:null}}},this.listener=null,this._setup(this.element,n)}return r(e,t),s(e,[{key:"open",value:function(){this._public("Open")}},{key:"close",value:function(){this._public("Close")}},{key:"toggle",value:function(){this._public("Toggle")}},{key:"toggleListen",value:function(){this._public("Listen")}},{key:"_public",value:function(t){var n=void 0;n="undefined"==typeof element?a(Object.getPrototypeOf(e.prototype),"_objToArray",this).call(this,document.getElementsByTagName("share-button")):document.querySelectorAll(element);var i=!0,o=!1,r=void 0;try{for(var s,l=n[Symbol.iterator]();!(i=(s=l.next()).done);i=!0){var c=s.value,u=c.getElementsByClassName(this.config.ui.namespace+"social")[0];this["_event"+t](c,u)}}catch(d){o=!0,r=d}finally{try{!i&&l["return"]&&l["return"]()}finally{if(o)throw r}}}},{key:"_setup",value:function(t,n){var i=void 0;"undefined"==typeof t?i=a(Object.getPrototypeOf(e.prototype),"_objToArray",this).call(this,document.getElementsByTagName("share-button")):(i=document.querySelectorAll("share-button"+t),"object"==typeof i&&(i=a(Object.getPrototypeOf(e.prototype),"_objToArray",this).call(this,i))),this._merge(this.config,n),this.config.networks.whatsapp.enabled&&!this._isMobile()&&(this.config.networks.whatsapp.enabled=!1),0===this.config.ui.networkOrder.length&&(this.config.ui.networkOrder=["pinterest","twitter","facebook","whatsapp","googlePlus","reddit","linkedin","email"]);var o=!0,r=!1,s=void 0;try{for(var l,c=Object.keys(this.config.networks)[Symbol.iterator]();!(o=(l=c.next()).done);o=!0){var u=l.value;this.config.ui.networkOrder.indexOf(u.toString())<0&&(this.config.networks[u].enabled=!1,this.config.ui.networkOrder.push(u))}}catch(d){r=!0,s=d}finally{try{!o&&c["return"]&&c["return"]()}finally{if(r)throw s}}this._fixFlyout(),this._detectNetworks(),this._normalizeNetworkConfiguration(),this.config.networks.facebook.enabled&&this.config.networks.facebook.loadSdk&&this._injectFacebookSdk();var f=0,h=!0,p=!1,g=void 0;try{for(var m,b=i[Symbol.iterator]();!(h=(m=b.next()).done);h=!0){var v=m.value;this._setupInstance(v,f++)}}catch(d){p=!0,g=d}finally{try{!h&&b["return"]&&b["return"]()}finally{if(p)throw g}}}},{key:"_setupInstance",value:function(t,e){var n=this;this._hide(t),this._addClass(t,"sharer-"+e),this._injectHtml(t),this._show(t);var i=t.getElementsByClassName(this.config.ui.namespace+"social")[0],o=t.getElementsByTagName("li");this._addClass(i,"networks-"+this.config.enabledNetworks),t.addEventListener("click",function(){return n._eventToggle(t,i)});var r=function(e){var i=o[e];"undefined"!=typeof i&&!function(){var e=i.getAttribute("data-network"),o=i.getElementsByTagName("a")[0];n._addClass(i,n.config.networks[e]["class"]),"email"!==i.className&&o.setAttribute("onclick","return false"),o.addEventListener("mousedown",function(){n._hook("before",e,t)}),o.addEventListener("mouseup",function(){n["_network"+e.capFLetter()](i)}),o.addEventListener("click",function(){n._hook("after",e,t)})}()};for(var s in Object.keys(o))r(s)}},{key:"_eventToggle",value:function(t,e){this._hasClass(e,"active")?this._eventClose(e):this._eventOpen(t,e)}},{key:"_eventOpen",value:function(t,e){this._hasClass(e,"load")&&this._removeClass(e,"load"),this.collision&&this._collisionDetection(t,e),this._addClass(e,"active")}},{key:"_eventClose",value:function(t){this._removeClass(t,"active")}},{key:"_eventListen",value:function(t,e){var n=this,i=this._getDimensions(t,e);null===this.listener?this.listener=window.setInterval(function(){return n._adjustClasses(t,e,i)},100):(window.clearInterval(this.listener),this.listener=null)}},{key:"_fixFlyout",value:function(){var t=this.config.ui.flyout.split(" ");t[0].substring(0,this.config.ui.namespace.length)!==this.config.ui.namespace&&(t[0]=""+this.config.ui.namespace+t[0]),t[1].substring(0,this.config.ui.namespace.length)!==this.config.ui.namespace&&(t[1]=""+this.config.ui.namespace+t[1]),this.config.ui.flyout=t.join(" ")}},{key:"_collisionDetection",value:function(t,e){var n=this,i=this._getDimensions(t,e);this._adjustClasses(t,e,i),t.classList.contains("clicked")||(window.addEventListener("scroll",function(){return n._adjustClasses(t,i)}),window.addEventListener("resize",function(){return n._adjustClasses(t,i)}),t.classList.add("clicked"))}},{key:"_getDimensions",value:function(t,e){return{networksWidth:e.offsetWidth,buttonHeight:t.offsetHeight,buttonWidth:t.offsetWidth}}},{key:"_adjustClasses",value:function(t,e,n){var i=window.innerWidth,o=window.innerHeight,r=t.getBoundingClientRect().left+n.buttonWidth/2,s=i-r,a=t.getBoundingClientRect().top+n.buttonHeight/2,l=this._findLocation(r,a,i,o);if("middle"===l[1]&&"center"!==l[0]&&("left"===l[0]&&i<=r+220+n.buttonWidth/2||"right"===l[0]&&i<=s+220+n.buttonWidth/2))e.classList.add(this.config.ui.namespace+"top"),e.classList.remove(this.config.ui.namespace+"middle"),e.classList.remove(this.config.ui.namespace+"bottom");else{switch(l[0]){case"left":e.classList.add(this.config.ui.namespace+"right"),e.classList.remove(this.config.ui.namespace+"center"),e.classList.remove(this.config.ui.namespace+"left");break;case"center":"top"!==l[1]&&e.classList.add(this.config.ui.namespace+"top"),e.classList.add(this.config.ui.namespace+"center"),e.classList.remove(this.config.ui.namespace+"left"),e.classList.remove(this.config.ui.namespace+"right"),e.classList.remove(this.config.ui.namespace+"middle");break;case"right":e.classList.add(this.config.ui.namespace+"left"),e.classList.remove(this.config.ui.namespace+"center"),e.classList.remove(this.config.ui.namespace+"right")}switch(l[1]){case"top":e.classList.add(this.config.ui.namespace+"bottom"),e.classList.remove(this.config.ui.namespace+"middle"),"center"!==l[0]&&e.classList.remove(this.config.ui.namespace+"top");break;case"middle":"center"!==l[0]&&(e.classList.add(this.config.ui.namespace+"middle"),e.classList.remove(this.config.ui.namespace+"top")),e.classList.remove(this.config.ui.namespace+"bottom");break;case"bottom":e.classList.add(this.config.ui.namespace+"top"),e.classList.remove(this.config.ui.namespace+"middle"),e.classList.remove(this.config.ui.namespace+"bottom")}}}},{key:"_findLocation",value:function(t,e,n,i){var o=["left","center","right"],r=["top","middle","bottom"],s=Math.trunc(3*(1-(n-t)/n)),a=Math.trunc(3*(1-(i-e)/i));return s>=3?s=2:s<=-1&&(s=0),a>=3?a=2:a<=-1&&(a=0),[o[s],r[a]]}},{key:"_networkFacebook",value:function(t){return this.config.networks.facebook.loadSdk?window.FB?(this._updateHref(t,"https://www.facebook.com/sharer/sharer.php",{u:this.config.networks.facebook.url}),FB.ui({method:"feed",name:this.config.networks.facebook.title,link:this.config.networks.facebook.url,picture:this.config.networks.facebook.image,caption:this.config.networks.facebook.caption,description:this.config.networks.facebook.description})):console.error("The Facebook JS SDK hasn't loaded yet."):this._updateHref(t,"https://www.facebook.com/sharer/sharer.php",{u:this.config.networks.facebook.url})}},{key:"_networkTwitter",value:function(t){this._updateHref(t,"https://twitter.com/intent/tweet",{text:this.config.networks.twitter.description,url:this.config.networks.twitter.url})}},{key:"_networkGooglePlus",value:function(t){this._updateHref(t,"https://plus.google.com/share",{url:this.config.networks.googlePlus.url})}},{key:"_networkPinterest",value:function(t){this._updateHref(t,"https://www.pinterest.com/pin/create/button",{url:this.config.networks.pinterest.url,media:this.config.networks.pinterest.image,description:this.config.networks.pinterest.description})}},{key:"_networkLinkedin",value:function(t){this._updateHref(t,"https://www.linkedin.com/shareArticle",{mini:"true",url:this.config.networks.linkedin.url,title:this.config.networks.linkedin.title,summary:this.config.networks.linkedin.description})}},{key:"_networkEmail",value:function(t){this._updateHref(t,"mailto:",{subject:this.config.networks.email.title,body:this.config.networks.email.description})}},{key:"_networkReddit",value:function(t){this._updateHref(t,"http://www.reddit.com/submit",{url:this.config.networks.reddit.url,title:this.config.networks.reddit.title})}},{key:"_networkWhatsapp",value:function(t){this._updateHref(t,"whatsapp://send",{text:this.config.networks.whatsapp.description+" "+this.config.networks.whatsapp.url})}},{key:"_injectStylesheet",value:function(t){if(!this.el.head.querySelector("link[href='"+t+"']")){var e=document.createElement("link");e.setAttribute("rel","stylesheet"),e.setAttribute("href",t),this.el.head.appendChild(e)}}},{key:"_injectHtml",value:function(t){var e=this.config.ui.networkOrder,n="",i=!0,o=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var l=s.value;n+="<li class='"+l+"' data-network='"+l+"'><a></a></li>"}}catch(c){o=!0,r=c}finally{try{!i&&a["return"]&&a["return"]()}finally{if(o)throw r}}t.innerHTML=this.config.ui.buttonText+"<div class='"+this.config.ui.namespace+"social load "+this.config.ui.flyout+"'><ul>"+n+"</ul></div>"}},{key:"_injectFacebookSdk",value:function(){if(!window.FB&&this.config.networks.facebook.appId&&!this.el.body.querySelector("#fb-root")){var t=document.createElement("script");t.text="window.fbAsyncInit=function(){FB.init({appId:'"+this.config.networks.facebook.appId+"',status:true,xfbml:true})};(function(e,t,n){var r,i=e.getElementsByTagName(t)[0];if (e.getElementById(n)){return}r=e.createElement(t);r.id=n;r.src='//connect.facebook.net/en_US/all.js';i.parentNode.insertBefore(r,i)})(document,'script','facebook-jssdk');";var e=document.createElement("div");e.id="fb-root",this.el.body.appendChild(e),this.el.body.appendChild(t)}}},{key:"_hook",value:function(t,e,n){var i=this.config.networks[e][t];if("function"==typeof i){var o=i.call(this.config.networks[e],n);void 0!==o&&(o=this._normalizeFilterConfigUpdates(o),this.extend(this.config.networks[e],o,!0),this._normalizeNetworkConfiguration())}}},{key:"_defaultTitle",value:function(){var t=void 0;return(t=document.querySelector('meta[property="og:title"]')||document.querySelector('meta[name="twitter:title"]'))?t.getAttribute("content"):(t=document.querySelector("title"))?t.textContent||t.innerText:void 0}},{key:"_defaultImage",value:function(){var t=void 0;if(t=document.querySelector('meta[property="og:image"]')||document.querySelector('meta[name="twitter:image"]'))return t.getAttribute("content")}},{key:"_defaultDescription",value:function(){var t=void 0;return(t=document.querySelector('meta[property="og:description"]')||document.querySelector('meta[name="twitter:description"]')||document.querySelector('meta[name="description"]'))?t.getAttribute("content"):""}},{key:"_detectNetworks",value:function(){var t=!0,e=!1,n=void 0;try{for(var i,o=Object.keys(this.config.networks)[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var r=i.value,s=!0,a=!1,l=void 0;try{for(var c,u=Object.keys(this.config.networks[r])[Symbol.iterator]();!(s=(c=u.next()).done);s=!0){var d=c.value;null===this.config.networks[r][d]&&(this.config.networks[r][d]=this.config[d])}}catch(f){a=!0,l=f}finally{try{!s&&u["return"]&&u["return"]()}finally{if(a)throw l}}this.config.networks[r].enabled?(this["class"]="enabled",this.config.enabledNetworks+=1):this["class"]="disabled",this.config.networks[r]["class"]=this["class"]}}catch(f){e=!0,n=f}finally{try{!t&&o["return"]&&o["return"]()}finally{if(e)throw n}}}},{key:"_normalizeNetworkConfiguration",value:function(){this.config.networks.facebook.appId||(this.config.networks.facebook.loadSdk=!1),this.config.networks.twitter.description&&(this._isEncoded(this.config.networks.twitter.description)||(this.config.networks.twitter.description=encodeURIComponent(this.config.networks.twitter.description))),"number"==typeof this.config.networks.facebook.appId&&(this.config.networks.facebook.appId=this.config.networks.facebook.appId.toString())}},{key:"_normalizeFilterConfigUpdates",value:function(t){return this.config.networks.facebook.appId!==t.appId&&(console.warn("You are unable to change the Facebook appId after the button has been initialized. Please update your Facebook filters accordingly."),delete t.appId),this.config.networks.facebook.loadSdk!==t.loadSdk&&(console.warn("You are unable to change the Facebook loadSdk option after the button has been initialized. Please update your Facebook filters accordingly."),delete t.appId),t}}]),e}(c["default"]);e.exports=u},{"./share-utils":38,"core-js/fn/array/iterator":1,"core-js/fn/math/trunc":2,"core-js/fn/symbol":3}],38:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(){i(this,t)}return o(t,[{key:"_getStyle",value:function(t,e){var n="";return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,"").getPropertyValue(e):t.currentStyle&&(e=e.replace(/\-(\w)/g,function(t,e){return e.toUpperCase()}),n=t.currentStyle[e]),n}},{key:"_hide",value:function(t){t.style.display="none"}},{key:"_show",value:function(t){t.style.display="initial"}},{key:"_hasClass",value:function(t,e){return t.classList.contains(e)}},{key:"_addClass",value:function(t,e){t.classList.add(e)}},{key:"_removeClass",value:function(t,e){t.classList.remove(e)}},{key:"_isEncoded",value:function(t){return t=t.toRFC3986(),decodeURIComponent(t)!==t}},{key:"_encode",value:function(t){return"undefined"==typeof t||null===t||this._isEncoded(t)?encodeURIComponent(t):t.toRFC3986()}},{key:"_getUrl",value:function(t){var e=this,n=(!(arguments.length<=1||void 0===arguments[1])&&arguments[1],arguments.length<=2||void 0===arguments[2]?{}:arguments[2]),i=function(){var t=[],i=!0,o=!1,r=void 0;try{for(var s,a=Object.keys(n)[Symbol.iterator]();!(i=(s=a.next()).done);i=!0){var l=s.value,c=n[l];t.push(l+"="+e._encode(c))}}catch(u){o=!0,r=u}finally{try{!i&&a["return"]&&a["return"]()}finally{if(o)throw r}}return t.join("&")}();return i&&(i="?"+i),t+i}},{key:"_updateHref",value:function(t,e,n){var i=e.indexOf("mailto:")>=0,o=t.getElementsByTagName("a")[0];if(o.setAttribute("href",this._getUrl(e,!i,n)),!(i||this.config.networks.facebook.loadSdk&&"facebook"===t.getAttribute("class"))){var r={width:500,height:350};r.top=screen.height/2-r.height/2,r.left=screen.width/2-r.width/2,window.open(o.href,"targetWindow","\n          toolbar=no,\n          location=no,\n          status=no,\n          menubar=no,\n          scrollbars=yes,\n          resizable=yes,\n          left="+r.left+",\n          top="+r.top+",\n          width="+r.width+",\n          height="+r.height+"\n        ")}}},{key:"popup",value:function e(t){var n=this,i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],e={width:500,height:350};e.top=screen.height/2-e.height/2,e.left=screen.width/2-e.width/2;var o=function(){var t=[],e=!0,o=!1,r=void 0;try{for(var s,a=Object.keys(i)[Symbol.iterator]();!(e=(s=a.next()).done);e=!0){var l=s.value,c=i[l];t.push(l+"="+n._encode(c))}}catch(u){o=!0,r=u}finally{try{!e&&a["return"]&&a["return"]()}finally{if(o)throw r}}return t.join("&")}();o&&(o="?"+o),window.open(t+o,"targetWindow","\n        toolbar=no,\n        location=no,\n        status=no,\n        menubar=no,\n        scrollbars=yes,\n        resizable=yes,\n        left="+e.left+",\n        top="+e.top+",\n        width="+e.width+",\n        height="+e.height+"\n      ")}},{key:"_merge",value:function(t){function e(e,n){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(t,e){"object"!=typeof t&&(t={});for(var n in e)if(e.hasOwnProperty(n)){var i=e[n];if("object"==typeof i){t[n]=this._merge(t[n],i);continue}t[n]=i}for(var o=2,r=arguments.length;o<r;o++)_merge(t,arguments[o]);return t})},{key:"_objToArray",value:function(t){var e=[];for(var n in t)"object"==typeof t[n]&&e.push(t[n]);return e}},{key:"_isMobile",value:function(){return!(!navigator.userAgent.match(/Android|iPhone|PhantomJS/i)||navigator.userAgent.match(/iPod|iPad/i))}}]),t}();String.prototype.toRFC3986=function(){var t=encodeURIComponent(this);t.replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16)})},String.prototype.capFLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)},n["default"]=r,e.exports=n["default"]},{}]},{},[37])(37)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
